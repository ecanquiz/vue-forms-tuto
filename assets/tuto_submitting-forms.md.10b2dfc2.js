import{_ as s,c as a,o,N as e}from"./chunks/framework.d7a9eabf.js";const u=JSON.parse('{"title":"Enviando Formularios","description":"","frontmatter":{},"headers":[],"relativePath":"tuto/submitting-forms.md"}'),n={name:"tuto/submitting-forms.md"},l=e(`<h1 id="enviando-formularios" tabindex="-1">Enviando Formularios <a class="header-anchor" href="#enviando-formularios" aria-label="Permalink to &quot;Enviando Formularios&quot;">‚Äã</a></h1><h2 id="¬°bienvenido-de-nuevo" tabindex="-1">¬°Bienvenido de nuevo! <a class="header-anchor" href="#¬°bienvenido-de-nuevo" aria-label="Permalink to &quot;¬°Bienvenido de nuevo!&quot;">‚Äã</a></h2><blockquote><p>Con todos los componentes que hemos construido en las √∫ltimas lecciones, podemos construir cualquier tipo de formularios basados en componentes. Pero, ¬øde qu√© sirve un formulario a menos que podamos enviar las entradas del usuario para que sean procesadas o almacenadas en nuestro <em>backend</em>?</p></blockquote><p>En el estado actual del desarrollo de interfaz, el enfoque m√°s com√∫n para enviar datos de formulario a nuestro servidor es a trav√©s de <strong>XMLHTTPRequests</strong> o <strong>XHR</strong> para abreviar. Hablaremos m√°s sobre esto en un momento, pero por ahora solo sepa que <a href="https://axios-http.com/docs/intro" target="_blank" rel="noreferrer">Axios</a> es una biblioteca que le permitir√° crear solicitudes <strong>XHR</strong> sin tener que lidiar con la <strong>API JavaScript Vanilla XHR</strong>, que es un poco engorrosa.</p><h2 id="primero-lo-primero" tabindex="-1">Primero lo primero <a class="header-anchor" href="#primero-lo-primero" aria-label="Permalink to &quot;Primero lo primero&quot;">‚Äã</a></h2><blockquote><p>Hay algunos conceptos b√°sicos de formularios que debemos aprender y comprender antes de sumergirnos en conectar <strong>Axios</strong> a nuestra aplicaci√≥n para comenzar a realizar nuestras solicitudes <strong>XHR</strong>. Analicemos los valores predeterminados del comportamiento de los formularios y algunos conceptos fundamentales de accesibilidad.</p></blockquote><p>El comportamiento predeterminado de un formulario en <strong>HTML</strong> es enviar un mont√≥n de datos a una <strong>URL</strong> espec√≠fica activando un evento de navegaci√≥n del navegador. Lo que esto significa es que sin el uso de una biblioteca como <strong>Axios</strong>, sus formularios <strong>HTML</strong> har√°n que el navegador cargue una p√°gina completamente nueva de forma predeterminada.</p><p>En la era de las <strong>SPA</strong> <em>(Single Page Applications)</em> en las que queremos brindar una navegaci√≥n fluida al usuario sin la constante recarga completa de las p√°ginas, esta no es una gran experiencia.</p><p>Cada formulario individual, necesita una etiqueta envolvente <code>&lt;form&gt;</code>. Los lectores de pantalla a menudo cambian al <strong>&quot;Forms Mode&quot;</strong> cuando procesan contenido dentro de un elemento <code>&lt;form&gt;</code>. Esto brinda a los usuarios que usan tecnolog√≠as accesibles una mejor experiencia al navegar los formularios, y no hay raz√≥n para no hacerlo.</p><p>Hay muchas formas de activar el env√≠o de un formulario. Un usuario puede hacer <code>click</code> o tabular en un bot√≥n de env√≠o y hacer <code>click</code> en √©l o pulsar <code>Intro</code>. Un usuario tambi√©n puede presionar la tecla <code>Intro</code> dentro de uno de nuestros campos. Los lectores de pantalla buscar√°n botones con el tipo <code>type=&quot;submit&quot;</code> en ellos.</p><blockquote><p>Entonces, ¬øc√≥mo capturamos correctamente el intento del usuario de enviar nuestro formulario?</p></blockquote><h2 id="el-evento-submit" tabindex="-1">El evento <code>submit</code> <a class="header-anchor" href="#el-evento-submit" aria-label="Permalink to &quot;El evento \`submit\`&quot;">‚Äã</a></h2><p>Cada vez que un usuario env√≠a un formulario dentro de una etiqueta de formulario envolvente, esta etiqueta de formulario emite un evento de env√≠o que podemos escuchar, y aunque es una pr√°ctica com√∫n configurar un detector <code>click</code> en el bot√≥n de env√≠o de un formulario, esto debe evitarse.</p><p>Escuchar el evento <code>click</code> de un bot√≥n dentro de la etiqueta del formulario (y evitar su comportamiento predeterminado) bloquea efectivamente el comportamiento predeterminado del formulario <strong>HTML</strong>, que es enviar este evento de env√≠o y luego enviar los datos dentro de dicho formulario. Sin embargo, no nos cubre de otras formas posibles de presentar dicho formulario, como las que hemos conocido anteriormente.</p><blockquote><p>Quiz√°s se est√© preguntando, ¬øqu√© sucede si olvidamos agregar este tipo <code>submit</code> a uno de nuestros botones dentro del formulario?</p></blockquote><p>Los navegadores asumir√°n que los botones dentro de las etiquetas de formulario que no tienen un tipo establecido est√°n destinados a enviar el formulario; sin embargo, la especificidad adicional ayudar√° a las herramientas de accesibilidad a identificarlo como el bot√≥n destinado a enviar nuestro formulario.</p><p>Si nuestro formulario requer√≠a otros tipos de botones, como un bot√≥n <code>Cancel</code>, por ejemplo, agregarle el <code>type=&quot;button&quot;</code> espec√≠fico evitar√° que active el evento <code>submit</code> del formulario.</p><h2 id="navegue-a-nuestro-tasksform-vue" tabindex="-1">Navegue a nuestro <code>TasksForm.vue</code> <a class="header-anchor" href="#navegue-a-nuestro-tasksform-vue" aria-label="Permalink to &quot;Navegue a nuestro \`TasksForm.vue\`&quot;">‚Äã</a></h2><p>Como puede ver, ya tenemos nuestro bot√≥n de env√≠o establecido con el tipo <code>submit</code>. Cada vez que se hace <code>click</code> en un bot√≥n con el tipo de env√≠o que se encuentra dentro de un elemento de formulario envolvente, se activa el evento <code>submit</code> de ese formulario envolvente. Este es el comportamiento que queremos para nuestros formularios.</p><p>Ahora podemos ir a nuestra etiqueta de formulario y comenzar a escuchar el evento <code>@submit</code> de nuestro formulario.</p><p>üìÉ<code>TasksForm.vue</code></p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">form</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@submit.prevent</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">sendForm</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">&lt;!-- omitted for brevity ... --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">form</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>Tenga en cuenta que estamos usando el modificador de eventos <code>.prevent</code> en el detector de eventos <code>@submit</code>. Este modificador llamar√° a <a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault" target="_blank" rel="noreferrer"><code>preventDefault</code></a> en el evento <code>submit</code> para nosotros, de modo que nuestro m√©todo <code>sendForm</code> pueda enfocarse exclusivamente en la l√≥gica de env√≠o de nuestro formulario, y no en el manejo de eventos.</p><blockquote><p>Establecer <code>preventDefault</code> en un evento <code>submit</code> para un elemento <code>form</code> bloquear√° el comportamiento predeterminado de hacer que el formulario env√≠e los datos por s√≠ mismo y vuelva a cargar el navegador. Queremos mantener el control sobre c√≥mo se procesa nuestro formulario y queremos hacer <code>post</code> de nuestros datos usando <strong>Axios</strong> ‚Äî por lo que evitar este comportamiento predeterminado es exactamente lo que necesitamos.</p></blockquote><p>Ahora que estamos escuchando el evento, avancemos y agreguemos nuestro nuevo m√©todo <code>sendForm</code> dentro de la secci√≥n <code>script</code> de nuestro componente.</p><p>üìÉ<code>TasksForm.vue</code></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">reactive</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">type</span><span style="color:#A6ACCD;"> Task </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@/types/Task</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> props </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineProps</span><span style="color:#89DDFF;">&lt;{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// omitted for brevity ...</span></span>
<span class="line"><span style="color:#89DDFF;">}&gt;</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> form </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#A6ACCD;">(props</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">task)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> situationOptions </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// omitted for brevity ...</span></span>
<span class="line"><span style="color:#A6ACCD;">]</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> sendForm </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// here inside will be the code of this method</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>Llegado a este punto, es momento de recordar las dos premisas √∫tiles de dise√±o que implementamos cuando empezamos a construir la vista <code>Tasks.vue</code>.</p><blockquote><ol><li>Regla de negocio separada de la interfaz de usuario (UI)</li><li>Formulario encapsulado en el componente respectivo</li></ol></blockquote><p>En este sentido se preguntar√° <strong>¬øqu√© l√≥gica ocupar√° el m√©todo <code>sendForm</code>?</strong></p><p>La respuesta por si sola nos lleva a pensar que la responsabilidad del componente <code>TasksForm.vue</code> es la un formulario como tal, por lo que la regla de negocio debe ser transparente para √©l. Al efecto, su responsabilidad solo ser√° capturar las entradas del usuario y emitir la carga √∫til al componente padre.</p><blockquote><p>Asimismo su responsabilidad encapsulada har√° que las correspondientes pruebas unitarias sean m√°s f√°ciles de <em>testear</em>.</p></blockquote><h2 id="emitiendo-sendform" tabindex="-1">Emitiendo <code>sendForm</code> <a class="header-anchor" href="#emitiendo-sendform" aria-label="Permalink to &quot;Emitiendo \`sendForm\`&quot;">‚Äã</a></h2><p>Entonces avancemos definiendo el m√©todo <code>sendForm</code> c√≥mo <code>emit</code> recibiendo un objeto <code>task</code> de carga √∫til. Luego ocupamos el m√©todo <code>sendForm</code> invocando la emisi√≥n del dicho m√©todo y pasando la carga √∫til, el objeto <code>form</code>.</p><p>üìÉ<code>TasksForm.vue</code></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line highlighted"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">reactive</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">toRaw</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">type</span><span style="color:#A6ACCD;"> Task </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@/types/Task</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> props </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineProps</span><span style="color:#89DDFF;">&lt;{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// omitted for brevity ...</span></span>
<span class="line"><span style="color:#89DDFF;">}&gt;</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> form </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#A6ACCD;">(props</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">task)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> situationOptions </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// omitted for brevity ...</span></span>
<span class="line"><span style="color:#A6ACCD;">]</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> emit </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineEmits</span><span style="color:#89DDFF;">&lt;{</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">sendForm</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">task</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Task</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">}&gt;</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> sendForm </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">emit</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">sendForm</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">toRaw</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">form</span><span style="color:#F07178;">))</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>Tenga presente que en este caso la carga √∫til no necesita ser reactiva. Por ello envolvimos el objeto reactivo <code>form</code> dentro del m√©todo <a href="https://vuejs.org/api/reactivity-advanced.html#toraw" target="_blank" rel="noreferrer"><code>toRaw</code></a> cuando emitimos <code>sendForm</code>.</p><p>Ahora si nos ocuparemos de la regla de negocio que nos interesa.</p><h2 id="volviendo-a-usetask-ts" tabindex="-1">Volviendo a <code>useTask.ts</code> <a class="header-anchor" href="#volviendo-a-usetask-ts" aria-label="Permalink to &quot;Volviendo a \`useTask.ts\`&quot;">‚Äã</a></h2><p>Afortunadamente la Composition API de Vue nos permite encapsular la regla de negocio separandola de la UI. As√≠ que continuamos y situaremos nuestro m√©todo <code>sendForm</code> en nuestro composable.</p><p>üìÉ<code>userTasks.ts</code></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">reactive</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">   </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">task</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// omitted for brevity ...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// this could be set from an http request service</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">frequencies</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// omitted for brevity ...</span></span>
<span class="line"><span style="color:#F07178;">  ]</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line highlighted"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sendForm</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">payload</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// here inside will be sendForm method code</span></span>
<span class="line highlighted"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">frequencies</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">task</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">sendForm</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>Ser√° aqu√≠ donde ocuparemos la correspondiente regla de negocio retornandola al componente padre <code>Tasks.vue</code>.</p><p>Continuando con la idea de separar conceptos, destinaremos un archivo espec√≠fico que reunir√° las peticiones a nuestra API. Dicho archivo ser√° denominado <code>TaskService.ts</code> y lo importaremos desde <code>useTasks.ts</code> para su implementaci√≥n.</p><p>üìÉ<code>useTasks.ts</code></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">reactive</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line highlighted"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">postTask</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@/services/TaskService</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">   </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">task</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// omitted for brevity ...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// this could be set from an http request service</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">frequencies</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// omitted for brevity ...</span></span>
<span class="line"><span style="color:#F07178;">  ]</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sendForm</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">payload</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">    </span></span>
<span class="line highlighted"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">postTask</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">payload</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">response</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Response</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">response</span><span style="color:#F07178;">)</span></span>
<span class="line highlighted"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">catch</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">err</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Error</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;">)</span></span>
<span class="line highlighted"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// omitted for brevity ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">sendForm</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>Como habr√° notado, estamos desestructurando el m√≥dulo <code>TaskService</code> para implementar el m√©todo <code>postTask</code>. Este m√©todo ser√° el encargado de <em>postear</em> tareas a nuestra API.</p><blockquote><p>Una cosa importante que debe saber es que los m√©todos de Axios devuelven <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noreferrer">promesas javascript</a>, por lo tanto, el resultado del m√©todo <code>postTask</code> es una promesa. Esto significa que podemos agregar un m√©todo <code>then</code> a nuestra llamada posterior que devolver√° el <code>response</code> del servidor para que podamos trabajar con ella, y un m√©todo <code>catch</code> que podemos usar para manejar cualquier <code>error</code> que pueda ocurrir al enviar los datos. Para los prop√≥sitos de esta lecci√≥n, solo vamos a registrar los resultados en la consola aqu√≠ para ver estos dos m√©todos en acci√≥n.</p></blockquote><p>Ahora ha llegado el tiempo de ver que hay dentro del m√≥dulo <code>TasksService</code>.</p><h2 id="el-tasksservice" tabindex="-1">El TasksService <a class="header-anchor" href="#el-tasksservice" aria-label="Permalink to &quot;El TasksService&quot;">‚Äã</a></h2><p>Para impulsar nuestro dise√±o esta vez crearemos una carpeta <code>services</code> en la ra√≠z donde colocaremos nuestros archivos que hacen peticiones a APIs externas, en este caso el archivo <code>TasksService.ts</code>.</p><p>Copiemos y peguemos el siguiente c√≥digo dentro de la recientemente creada carpeta <code>services</code>.</p><p>üìÉ<code>TasksService.ts</code></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line highlighted"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> axios </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">axios</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> request </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> axios</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// baseURL: p<wbr>rocess.env.VUE_APP_API_URL,</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">baseURL</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">https://my-json-server.typicode.com/CaribesTIC/vue-forms</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">request</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">interceptors</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">response</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> response</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">error</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reject</span><span style="color:#A6ACCD;">(error)</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> postTask </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">payload</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">request</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">post</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/posts</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">payload</span><span style="color:#F07178;">)  </span></span>
<span class="line highlighted"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// export const getTasks = () =&gt; {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//  return request.get(&#39;/get-all-tasks&#39;)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// }</span></span></code></pre></div><p>Este c√≥digo representa un ejemplo de un m√≥dulo de servicios de peticiones a APIs.</p><p>Tenga en cuenta que primero estamos importando <code>axios</code>. Entonces, creamos una instancia de <code>axios</code> definiendo la propiedad <code>baseURL</code>. Luego, con esta instancia configuramos un interceptor para manejar las respuestas y los errores. Finalmente, exportamos cada uno de los puntos finales de nuestra API, entre ellos el m√©todo <code>postTask</code>.</p><p>Sigamos avanzando.</p><h2 id="configurando-axios" tabindex="-1">Configurando Axios <a class="header-anchor" href="#configurando-axios" aria-label="Permalink to &quot;Configurando Axios&quot;">‚Äã</a></h2><blockquote><p>Para poder capturar la entrada de nuestro usuario una vez que env√≠an el formulario, antes debemos configurar <a href="https://axios-http.com/" target="_blank" rel="noreferrer">Axios</a> ‚Äî la biblioteca que discutimos al comienzo de la lecci√≥n para hacer solicitudes XHR ‚Äî y un punto final de la API al que podemos enviar nuestros datos ficticios.</p></blockquote><p>Dir√≠jase a su terminal en la ra√≠z del proyecto y ejecute el siguiente comando para agregar <strong>Axios</strong> a su proyecto con su administrador de paquetes favorito.</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">axios</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">OR</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">yarn</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">axios</span></span></code></pre></div><p>Luego, como ya importamos <strong>Axios</strong>, podemos acceder a su m√©todo <code>post</code> directamente desde la instancia.</p><p>üìÉ<code>TasksService.ts</code></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> axios </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">axios</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// omitted for brevity ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> postTask </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">payload</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">request</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">post</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/posts</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">payload</span><span style="color:#F07178;">)  </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// omitted for brevity ...</span></span></code></pre></div><p>El primer argumento que requiere es la <code>URL</code> a donde va a enviar la informaci√≥n, en este caso, la que nos proporcion√≥ para el <strong>endpoint</strong> de eventos de nuestra <strong>API</strong> simulada <strong>my-json-server</strong>.</p><blockquote><p>Tenga en cuenta que, en este caso, la URL es igual al contenido de la propiedad <code>baseURL</code> del objeto <code>request</code> concatenado con la cadena <code>&#39;/posts&#39;</code>.</p></blockquote><p>El segundo argumento es el <code>payload</code>, un objeto que contiene toda la informaci√≥n que queremos enviar a nuestro servidor. Dado que ya tenemos toda la informaci√≥n del formulario ordenadamente envuelta en nuestro <code>payload</code>, podemos usarla directamente aqu√≠ y simplemente enviarla tal como est√° al servidor.</p><blockquote><p>Tenga en cuenta que las declaraciones tipo <code>any</code> son malas pr√°cticas que deben ser evitadas. Si desea establecer un tipo m√°s espec√≠fico para el caso del argumento <code>payload</code> podr√≠a usar algo como lo siguiente:</p></blockquote><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Paiload</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> [</span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// GenericObject</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ArrayBuffer</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ArrayBufferView</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">URLSearchParams</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">FormData</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">File</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Blob</span><span style="color:#89DDFF;">;</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">¬°Cuidado!</p><p>En un escenario de la vida real, querr√° validar la entrada de sus usuarios antes de enviarla al servidor, incluso si su <code>backend</code> va a realizar la validaci√≥n del lado del servidor.</p></div><blockquote><p>Hacer una validaci√≥n previa en la interfaz, o validaci√≥n del lado del cliente, es una pr√°ctica muy recomendable. En general, cualquier tipo de verificaci√≥n previa o cambio de <strong>UX</strong> que desee realizar mientras se envia el formulario debe realizarse en el m√©todo <code>sendForm</code>. Mostrar una rueda giratoria de <code>loading</code> o cambiar el texto del bot√≥n de <code>&quot;Summit&quot;</code> a <code>&quot;Summiting...&quot;</code> son algunos buenos trucos de <strong>UX</strong> que puede aprovechar en este estado. Sin embargo, las validaciones y la <strong>UX</strong> est√°n fuera del alcance de esta lecci√≥n, por lo que las omitiremos por ahora.</p></blockquote><p>Ahora que tenemos <strong>Axios</strong> configurado, necesitamos crear un punto final que recibir√° nuestros datos una vez que el usuario haya publicado el formulario. En un escenario del mundo real, este punto final generalmente lo proporcionar√° el <code>backend</code> de su aplicaci√≥n o un servicio de terceros como <a href="https://firebase.google.com/" target="_blank" rel="noreferrer">FireBase</a>.</p><p>En aras del aprendizaje, vamos a utilizar My JSON Server - una forma gratuita de crear nuestro propio punto final en l√≠nea falso - para que podamos aprender a postear nuestro formulario.</p><h2 id="mi-servidor-json" tabindex="-1">Mi Servidor JSON <a class="header-anchor" href="#mi-servidor-json" aria-label="Permalink to &quot;Mi Servidor JSON&quot;">‚Äã</a></h2><p>Cuando hablamos de <a href="https://my-json-server.typicode.com/" target="_blank" rel="noreferrer">My JSON Server</a> se trata de un servidor REST en l√≠nea falso.</p><p>La configuraci√≥n de sus propios repositorios <code>Github</code> es realmente f√°cil, simplemente contin√∫e y siga las instrucciones en su sitio web y agregue un archivo <code>db.json</code> a la rama principal o maestra de su repositorio, luego puede acceder y usarlo a trav√©s de la estructura de <code>URL</code> que proporcionan como punto final de la <code>API REST</code>.</p><p>Ya segu√≠ adelante y cre√© esto para nosotros, para que podamos usarlo con el repositorio del tutorial aqu√≠ en <a href="https://github.com/CaribesTIC/vue-forms" target="_blank" rel="noreferrer">CaribesTIC</a>. La URL de nuestra API REST es: <a href="https://my-json-server.typicode.com/CaribesTIC/vue-forms/" target="_blank" rel="noreferrer">https://my-json-server.typicode.com/CaribesTIC/vue-forms/</a></p><p>Cuando abra el servidor, notar√° que en recursos tenemos una lista de eventos, con la siguiente URL: <a href="https://my-json-server.typicode.com/CaribesTIC/vue-forms/posts" target="_blank" rel="noreferrer">https://my-json-server.typicode.com/CaribesTIC/vue-forms/posts</a></p><p>En particular, al guardar los datos de un formulario, casi siempre querr√° realizar un tipo particular de solicitud: una solicitud <code>POST</code>, que nos permite enviar una parte de los datos al servidor con ella.</p><h2 id="la-vista-tasks" tabindex="-1">La vista <code>Tasks</code> <a class="header-anchor" href="#la-vista-tasks" aria-label="Permalink to &quot;La vista \`Tasks\`&quot;">‚Äã</a></h2><p>Llegado a este punto, solo nos falta escuchar desde el componente padre <code>Tasks.vue</code> el evento <code>sendForm</code> emitido por el componente hijo <code>TasksForm</code>. Actualicemos entonces.</p><p>üìÉ<code>Tasks.vue</code></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> useTasks </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@/composables/useTasks</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> TasksForm </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@/components/TasksForm.vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  frequencies</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  task</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  sendForm</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useTasks</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Create an task</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">TasksForm</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#C792EA;">:task</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">task</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#C792EA;">:frequencies</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">frequencies</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">      </span><span style="color:#C792EA;">@sendForm</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">sendForm</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">    </span></span>
<span class="line"><span style="color:#89DDFF;">    /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">pre</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{ task }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">pre</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>Ahora que nuestra funci√≥n de env√≠o <code>sendForm</code> est√° lista, y despu√©s de haber aprendido toda esa teor√≠a, finalmente estamos listos para volver al navegador y probar nuestro formulario.</p><h2 id="volver-al-navegador" tabindex="-1">Volver al navegador <a class="header-anchor" href="#volver-al-navegador" aria-label="Permalink to &quot;Volver al navegador&quot;">‚Äã</a></h2><p>Sirva su proyecto y complete el formulario, aseg√∫rese de tener la pesta√±a <code>Network</code> abierta en su navegador para que pueda ver las solicitudes que se env√≠an, y finalmente presione el bot√≥n <strong><em>Submit</em></strong> para ver toda la informaci√≥n enviada r√°pidamente a nuestra <strong>API</strong>.</p><p>En la pesta√±a <code>Network</code> podemos ver nuestra solicitud exitosa y la respuesta, reflejando nuestro <em>payload</em>. Y en nuestro <code>console.log</code> los datos completos de respuesta.</p><h2 id="terminando" tabindex="-1">Terminando <a class="header-anchor" href="#terminando" aria-label="Permalink to &quot;Terminando&quot;">‚Äã</a></h2><p>¬°Eso fue mucha teor√≠a! Pero ahora tenemos un formulario completamente funcional que env√≠a datos a nuestro servidor. Sin embargo, hay una cosa m√°s, posiblemente una de las partes m√°s importantes de todas.</p><p>Hace algunas lecciones mencionamos que nuestros componentes no eran accesibles, y aunque en un escenario de la vida real la accesibilidad deber√≠a ser una consideraci√≥n principal al desarrollar sus componentes, simplemente era demasiada informaci√≥n para agregarla a nuestras lecciones anteriores.</p><blockquote><p>Ahora estamos listos para regresar y echar un vistazo a algunos conceptos b√°sicos de accesibilidad que siempre debe tener en cuenta al crear formularios en Vue.</p></blockquote>`,91),p=[l];function t(r,c,i,d,y,F){return o(),a("div",null,p)}const m=s(n,[["render",t]]);export{u as __pageData,m as default};
