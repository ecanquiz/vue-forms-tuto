import{_ as s,c as a,o as e,N as o}from"./chunks/framework.d7a9eabf.js";const n="/vue-forms-tuto/assets/identifiers1.5b182d61.jpg",l="/vue-forms-tuto/assets/identifiers2.86add1b9.jpg",C=JSON.parse('{"title":"Identificadores","description":"","frontmatter":{},"headers":[],"relativePath":"tuto/identifiers.md"}'),p={name:"tuto/identifiers.md"},t=o(`<h1 id="identificadores" tabindex="-1">Identificadores <a class="header-anchor" href="#identificadores" aria-label="Permalink to &quot;Identificadores&quot;">‚Äã</a></h1><p>En la lecci√≥n anterior digimos que hay una manera de relacionar las entradas con las etiquetas usando identificadores. Esta forma de relacionar elementos <strong>HTML</strong> ser√° √∫til en la pr√≥xima lecci√≥n cuando veamos los componentes <code>ErrorMessage</code>.</p><p>Pasemos directamente a nuestro componente <code>AppInput</code> y descubramos c√≥mo crear una relaci√≥n entre nuestro <code>&lt;label&gt;</code> e <code>&lt;input&gt;</code> usando un <strong>ID</strong>.</p><blockquote><p>Puede estar pensando que quiz√°s la opci√≥n m√°s obvia ser√≠a agregar una propiedad, para que el padre pueda determinar la identificaci√≥n del elemento, y luego no tenemos que preocuparnos por eso dentro de nuestro componente. Y tendr√≠a raz√≥n... Pero, ¬øy si hubiera una forma en que pudi√©ramos generar din√°micamente identificadores num√©ricos √∫nicos para cada componente de nuestro formulario sin tener que recurrir a propiedades manuales?</p></blockquote><h2 id="uniqueid" tabindex="-1">UniqueID <a class="header-anchor" href="#uniqueid" aria-label="Permalink to &quot;UniqueID&quot;">‚Äã</a></h2><p>Vamos a crear un composable (Vue 3) que nos permita crear estos identificadores √∫nicos din√°micos, o <strong>UUID</strong> para abreviar.</p><blockquote><p>Es un poco un salto del ritmo del tutorial, pero vamos a hablar un poco sobre la <a href="https://vuejs.org/api/composition-api-setup.html" target="_blank" rel="noreferrer">Composition API</a> y los <a href="https://vuejs.org/guide/reusability/composables.html" target="_blank" rel="noreferrer">Composables</a>. En cualquier caso, no hay que preocuperse demasiado, va a ser muy sencillo.</p></blockquote><p>Sigamos adelante y creemos un archivo <code>useUniqueID.ts</code> dentro la carpeta <code>composables</code>.</p><p>Vamos a ver.</p><p>üìÉ<code>useUniqueId.ts</code></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> UUID </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useUniqueId</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">getID</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">UUID</span><span style="color:#89DDFF;">++</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">UUID</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    String</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">getID</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>Primero declaramos una variable <code>let</code> con un valor predeterminado en <code>0</code>. Esto aumentar√° a medida que creamos m√°s y m√°s componentes: el primer componente tendr√° una identificaci√≥n de <code>1</code>, el segundo de <code>2</code>, y as√≠ sucesivamente.</p><p>Vamos a exportar una funci√≥n <code>UniqueId</code>. Cuando se ejecuta, esta funci√≥n devolver√° un objeto que contiene una funci√≥n bajo la propiedad <code>getID</code>. Esta funci√≥n aumentar√° en <code>1</code> el contador <code>UUID</code> global y lo devolver√°.</p><p>Sepa tambi√©n que hay muchas bibliotecas de <code>UUID</code> que puede usar en lugar de esta soluci√≥n personalizada, pero quer√≠amos mostrarle lo f√°cil que puede ser.</p><p>Veamos esto en acci√≥n para entenderlo mejor, observando <code>AppInput.vue</code>.</p><p>Primero, vamos a importar nuestro nuevo composable.</p><p>üìÉ<code>AppInput.vue</code></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line highlighted"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> useUniqueId </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@/composables/useUniqueId</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// omitted for brevity ...</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">&lt;!-- // omitted for brevity ... --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>Ahora que lo tenemos listo, podemos generar una nuevo <strong>ID</strong> √∫nico dentro del <code>&lt;script setup&gt;</code> de nuestro componente. Sigamos adelante y hagamos eso.</p><p>üìÉ<code>AppInput.vue</code></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> useUniqueId </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@/composables/useUniqueId</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">withDefaults</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">defineProps</span><span style="color:#89DDFF;">&lt;{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// omitted for brevity ...</span></span>
<span class="line"><span style="color:#89DDFF;">}&gt;</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// omitted for brevity ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> uuid </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useUniqueId</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getID</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>Tenga en cuenta que estamos ejecutando el composable <code>useUniqueId</code> y luego el m√©todo <code>getID</code> dentro. Esto nos dar√° un n√∫mero de identificaci√≥n completamente √∫nico cada vez que se instancia un componente.</p><p>Finalmente, devolvemos un objeto con el <code>uuid</code> para que podamos usarlo en nuestra plantilla.</p><p>Hablando de eso, volvamos al <code>template</code> y atemos el <code>label</code> y el <code>input</code>. Para lograr esto, necesitamos darle al elemento <code>input</code> un valor de atributo <code>id</code>. Vincularemos el <code>id</code> a nuestro <code>uuid</code>. Una vez que tenemos declarado el <code>input</code> con su propio <strong>ID</strong> √∫nico, ahora podemos decirle al <code>label</code> que describe el <code>input</code> estableciendo el atributo <code>for</code> del <code>label</code>.</p><blockquote><p>Nota: Todos estos son atributos de vainilla <strong>HTML</strong>, no hay magia loca de Vue aqu√≠ aparte de la facilidad de vincularlos a todos.</p></blockquote><p>üìÉ<code>AppInput.vue</code></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">label</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:for</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">uuid</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-if</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">label</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{ label }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">label</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">v-bind</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">$attrs</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">:value</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">modelValue</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">:placeholder</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">label</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">@input</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">$emit(&#39;update:modelValue&#39;, ($event.target as HTMLInputElement).value)</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">field</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">:id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">uuid</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">  </span></span>
<span class="line"><span style="color:#89DDFF;">  &gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>Vuelva al navegador. Lo primero que queremos se√±alar es que la se√±al de advertencia en nuestro campo se ha ido. Y si revisamos un poco debajo de donde dice <code>relations</code> dentro de las <code>Properties</code> accesibles, podemos ver ahora que muestra una nueva entrada: etiquetada por: <strong>&#39;Name&#39;</strong>. Si pasa el cursor sobre este elemento, ahora puede ver en el navegador a qu√© elemento se refiere exactamente. Limpio, ¬øverdad?</p><p><img src="`+n+'" alt="identifiers"></p><p>Ahora, si echamos un vistazo a la pesta√±a del inspector y observamos nuestros elementos de entrada, podemos ver que se les han asignado autom√°ticamente el identificador <code>&#39;1&#39;</code>, respectivamente.</p><p><img src="'+l+'" alt="identifiers"></p><h2 id="terminando" tabindex="-1">Terminando <a class="header-anchor" href="#terminando" aria-label="Permalink to &quot;Terminando&quot;">‚Äã</a></h2><p>Todav√≠a necesitamos agregar un <code>uuid</code> a nuestros componentes <code>Checkbox</code>, <code>Radio</code>, <code>Select</code> y <code>Textarea</code>. ¬øEst√°s listo para un desaf√≠o? Intenta hacer esto t√∫ mismo. Ser√° tan sencillo como replicar exactamente lo que acabamos de hacer aqu√≠ con <code>AppInput</code>.</p>',33),c=[t];function r(i,d,u,D,y,F){return e(),a("div",null,c)}const g=s(p,[["render",r]]);export{C as __pageData,g as default};
