import{_ as s,c as a,o as e,N as o}from"./chunks/framework.d7a9eabf.js";const n="/vue-forms-tuto/assets/accessible-errors1.008f0860.jpg",l="/vue-forms-tuto/assets/accessible-errors2.48138e64.jpg",p="/vue-forms-tuto/assets/accessible-errors3.1525aa13.jpg",b=JSON.parse('{"title":"Errores Accesibles","description":"","frontmatter":{},"headers":[],"relativePath":"tuto/accessible-errors.md"}'),r={name:"tuto/accessible-errors.md"},t=o(`<h1 id="errores-accesibles" tabindex="-1">Errores Accesibles <a class="header-anchor" href="#errores-accesibles" aria-label="Permalink to &quot;Errores Accesibles&quot;">‚Äã</a></h1><blockquote><p>¬øAlguna vez llen√≥ un formulario solo para presionar el bot√≥n de enviar y nada parec√≠a funcionar? Claramente no se estaba enviando, y no hab√≠a ning√∫n error visible en ninguna parte, sin embargo, algo estaba claramente mal. Esta situaci√≥n no es ajena a la mayor√≠a de los usuarios de Internet, pero imagine la exasperaci√≥n cuando necesita herramientas accesibles y el formulario no le dice f√°cilmente cu√°l es el problema con sus entradas.</p></blockquote><p>Primero vayamos a nuestro componente <code>AppInput.vue</code> y agreguemos una nueva propiedad, <code>error</code>, que nos permitir√° establecer una cadena con un mensaje de error en caso de que el componente se encuentre en un estado de error.</p><p>üìÉ<code>AppInput.vue</code></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#82AAFF;">withDefaults</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">defineProps</span><span style="color:#89DDFF;">&lt;{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">label</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">modelValue</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">error</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>
<span class="line"><span style="color:#89DDFF;">}&gt;</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">label</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">modelValue</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">error</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>Mostraremos este <code>error</code> debajo de nuestro campo <code>input</code> cada vez que haya un <code>error</code> presente, si la propiedad de <code>error</code> se establece en algo que no sea una cadena vac√≠a.</p><p>üìÉ<code>AppInput.vue</code></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">label</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:for</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">uuid</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-if</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">label</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{ label }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">label</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">v-bind</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">$attrs</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">:value</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">modelValue</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">:placeholder</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">label</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">@input</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">$emit(&#39;update:modelValue&#39;, ($event.target as HTMLInputElement).value)</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">field</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">:id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">uuid</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">  </span></span>
<span class="line"><span style="color:#89DDFF;">  &gt;</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">v-if</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">error</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">errorMessage</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">  &gt;</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">    {{ error }}</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>Tambi√©n volveremos a <code>TasksForm.vue</code> y agregaremos un mensaje de <code>error</code> a nuestra entrada <strong>&#39;Name&#39;</strong>, para que podamos ver c√≥mo se comporta en el navegador. Tenga en cuenta que tambi√©n agregamos una clase de mensaje <code>error</code> que simplemente lo colorear√° de rojo.</p><p>üìÉ<code>TasksForm.vue</code></p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">AppInput</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">v-model</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">form.name</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">label</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Name</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">error</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">This input has an error!</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">/&gt;</span></span></code></pre></div><p>Ahora echemos un vistazo al navegador, el <code>error</code> se muestra correctamente debajo del t√≠tulo una vez que se establece la propiedad <code>error</code>. Tenga en cuenta que si tuviera m√°s componentes <code>AppInput</code> dentro del formulario <code>TasksForm</code>, estos otros no mostrar√°n ning√∫n <code>error</code> porque la propiedad <code>error</code> no est√°n configuradas en nada para ellos.</p><p><img src="`+n+`" alt="accessible-errors"></p><p>Si abrimos nuestra pesta√±a de <strong>Accessibility</strong> en Firefox una vez m√°s e inspeccionamos el elemento <code>input</code>, podemos ver que no hay nada que vincule el <code>error</code> con el <code>input</code> del nombre real. Aqu√≠ es donde la mayor√≠a de los formularios se quedan cortos. El hecho de que el mensaje <code>error</code> est√© &quot;cerca&quot; del <code>input</code> no significa que un lector de pantalla pueda identificarlo como parte del <code>error</code>.</p><blockquote><p>Afortunadamente, hay una soluci√≥n sencilla a este problema: el atributo <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby" target="_blank" rel="noreferrer"><code>aria-describedby</code></a>. Este atributo nos permite establecer directamente en el elemento de entrada qu√© otros elementos lo describen.</p></blockquote><p>El atributo puede tomar una lista de cadenas de <strong>ID</strong> para otros elementos <strong>HTML</strong> en la p√°gina, as√≠ que primero agregaremos una <strong>ID</strong> √∫nico a nuestra etiqueta. Por suerte, ya tenemos un n√∫mero <strong>UUID</strong> asociado a la instancia del componente para hacerlo.</p><p>Volvamos a <code>AppInput</code> y agreguemos el v√≠nculo <code>id</code> a la etiqueta <code>p</code> de <code>error</code>.</p><p>üìÉ<code>AppInput.vue</code></p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">v-if</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">error</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">errorMessage</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">:id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">\`\${uuid}-error\`</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  {{ error }}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>Tenga en cuenta que estamos agregando la cadena <code>-error</code> al <code>UUID</code>. Necesitamos que este identificador sea √∫nico, y el <code>UUID</code> en s√≠ mismo ya est√° en uso por el <code>input</code>.</p><p>Ahora que nuestro mensaje de error tiene un <strong>ID</strong> √∫nico, podemos establecerlo como una <em>&quot;descripci√≥n&quot;</em> para el elemento <code>input</code> con el atributo <code>aria-describedby</code>.</p><p>üìÉ<code>AppInput.vue</code></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">label</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:for</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">uuid</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-if</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">label</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{ label }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">label</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">v-bind</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">$attrs</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">:value</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">modelValue</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">:placeholder</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">label</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">@input</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">$emit(&#39;update:modelValue&#39;, ($event.target as HTMLInputElement).value)</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">field</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">:id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">uuid</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">    </span></span>
<span class="line highlighted"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">:aria-describedby</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">error ? \`\${uuid}-error\` : undefined</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  &gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">v-if</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">error</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">errorMessage</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">:id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">\`\${uuid}-error\`</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  &gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    {{ error }}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>Tenga en cuenta que estamos agregando una verificaci√≥n secundaria para ver si se establece un <code>error</code>. Esto nos permite un poco de higiene en la relaci√≥n entre nuestros elementos: cuando no hay ning√∫n <code>error</code> presente, no se mostrar√° ning√∫n mensaje de <code>error</code> y la identificaci√≥n no apuntar√° a nada.</p><p>Si volvemos a revisar nuestro navegador, podemos ver que cuando el <code>error</code> est√° presente, una nueva descripci√≥n por entrada est√° presente en el objeto de relaci√≥n de la entrada.</p><p><img src="`+l+`" alt="accessible-errors"></p><p>Sin embargo, una cosa m√°s... Debido a que estamos usando <code>v-if</code> para mostrar esta informaci√≥n de forma intermitente, queremos asegurarnos de que los lectores de pantalla la anuncien o la lean cada vez que se muestre. Para hacer esto, agregaremos un atributo <code>aria-live=&quot;asertive&quot;</code>. Otra forma ser√≠a agregar un atributo <code>rol</code> de <code>&quot;alert&quot;</code>, pero descubrimos que <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-live" target="_blank" rel="noreferrer"><code>aria-live</code></a> tiende a funcionar mejor con un variedad de lectores de pantalla.</p><p>üìÉ<code>AppInput.vue</code></p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">v-if</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">error</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">errorMessage</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">:id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">\`\${uuid}-error\`</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">aria-live</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">assertive</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  {{ error }}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h2 id="estado-de-entrada-explicito" tabindex="-1">Estado de entrada expl√≠cito <a class="header-anchor" href="#estado-de-entrada-explicito" aria-label="Permalink to &quot;Estado de entrada expl√≠cito&quot;">‚Äã</a></h2><p>Otra cosa que podemos agregar r√°pidamente a nuestra entrada para que sea a√∫n m√°s accesible es el atributo <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-invalid" target="_blank" rel="noreferrer"><code>aria-invalid</code></a>. Un error que se comete en muchos formularios es tratar de confiar en un borde rojo alrededor de una entrada no v√°lida. Por razones obvias, esto no es accesible.</p><p>Ya hemos tomado medidas en errores accesibles, pero asegur√©monos de notificar tambi√©n a los lectores de pantalla sobre el estado no v√°lido de una entrada para proporcionar mejores comentarios a nuestros usuarios.</p><p>Vamos a agregar el atributo <code>aria-invalid</code> a nuestra entrada, y lo activaremos y desactivaremos dependiendo de si la propiedad <code>error</code> est√° establecida. Cuando la entrada es v√°lida, <code>undefined</code> har√° que la propiedad no se agregue al elemento de entrada.</p><p>üìÉ<code>AppInput.vue</code></p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">v-bind</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">$attrs</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">:value</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">modelValue</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">:placeholder</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">label</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">@input</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">$emit(&#39;update:modelValue&#39;, ($event.target as HTMLInputElement).value)</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">field</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">:id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">uuid</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">    </span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">:aria-describedby</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">error ? \`\${uuid}-error\` : undefined</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">:aria-invalid</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">error ? true : undefined</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>Si volvemos al navegador e inspeccionamos la entrada usando la herramienta de <strong>Accessibility</strong> en <strong>Firefox</strong>, podemos ver que el estado <code>&quot;invalid&quot;</code> ahora se ha agregado a los estados activos del <code>input</code>.</p><p><img src="`+p+'" alt="accessible-errors"></p><p>Otros estados dignos de menci√≥n a los que tambi√©n podr√≠amos agregar atributos son de <code>readonly</code>, <code>disabled</code> y <code>required</code>. Estos tres se pueden establecer directamente con atributos <strong>HTML5</strong> del mismo nombre, o con sus contrapartes aria: <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-readonly" target="_blank" rel="noreferrer"><code>aria-readonly</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-disabled" target="_blank" rel="noreferrer"><code>aria-disabled</code></a> y <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-required" target="_blank" rel="noreferrer"><code>aria-required</code></a>.</p><h2 id="no-deshabilites-el-boton-de-enviar" tabindex="-1">No deshabilites el bot√≥n de enviar <a class="header-anchor" href="#no-deshabilites-el-boton-de-enviar" aria-label="Permalink to &quot;No deshabilites el bot√≥n de enviar&quot;">‚Äã</a></h2><p>Si un formulario no es v√°lido, tiene sentido establecer el atributo <code>disabled</code> en <code>true</code> en el bot√≥n <code>submit</code> para que el usuario no pueda enviar el formulario, ¬øverdad? Incluso podemos dise√±ar el bot√≥n con un color diferente para transmitir que no se podr√° hacer click en √©l.</p><p>Sin embargo, hay un gran problema con esto. Los usuarios que conf√≠an en los lectores de pantalla no recibir√°n ning√∫n comentario, el lector de pantalla ignorar√° por completo el bot√≥n al navegar por el formulario. Esto claramente puede ser muy confuso y frustrante.</p><p>En su lugar, sugiero que realice todas y cada una de las comprobaciones para asegurarse de que su formulario sea v√°lido antes de enviarlo en el m√©todo <code>sendForm</code> que creamos en <code>TasksForm</code>. Si todo sale bien, enviamos el formulario normalmente.</p><p>Si algo est√° mal, establesca los errores necesarios en su formulario con las herramientas que acabamos de aprender para notificar al usuario que algo est√° mal.</p><h2 id="terminando" tabindex="-1">Terminando <a class="header-anchor" href="#terminando" aria-label="Permalink to &quot;Terminando&quot;">‚Äã</a></h2><p>Como puede ver, con unas pocas l√≠neas r√°pidas de <strong>HTML</strong> y algunos accesorios colocados estrat√©gicamente, logramos convertir nuestro componente <strong>AppInput</strong> en algo mucho m√°s accesible.</p><p>Sin embargo, quiero enfatizar que, en lo que respecta al tema de la accesibilidad, esto solo comienza a ara√±ar la superficie. ¬°Pero con estos pocos consejos, deber√≠amos poder establecer el rumbo para una forma m√°s inclusiva y accesible para nuestros proyectos!</p>',46),c=[t];function i(D,d,F,y,u,m){return e(),a("div",null,c)}const C=s(r,[["render",i]]);export{b as __pageData,C as default};
